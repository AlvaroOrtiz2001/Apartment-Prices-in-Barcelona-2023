{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a1f94c05",
   "metadata": {},
   "source": [
    "#  Apartment Prices in Barcelona: Sant Andreu"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6763ff91",
   "metadata": {},
   "source": [
    "Participants are encouraged to use the linear regression algorithm for prediction.\n",
    "\n",
    "Here are the definitions for each of the variables:\n",
    "\n",
    "num_rooms: This variable represents the number of bedrooms in an apartment.\n",
    "\n",
    "num_baths: It refers to the number of bathrooms in an apartment, indicating the count of spaces equipped with facilities for personal hygiene, such as toilets, sinks, and showers or baths.\n",
    "\n",
    "square_meters: This variable represents the total area or size of the apartment, measured in square meters. It provides an indication of the spatial extent or physical footprint of the property.\n",
    "\n",
    "orientation: It refers to the cardinal or directional aspect of the apartment, specifying the compass direction it faces or the direction in which its windows are oriented.\n",
    "\n",
    "year_built: This variable represents the year in which the apartment was constructed or built, providing an indication of its age and potential implications for its condition, architectural style, and infrastructure.\n",
    "\n",
    "door: It refers to the specific door number or identifier associated with the apartment within a building or complex. It distinguishes one apartment from another within the same property.\n",
    "\n",
    "is_furnished: This variable indicates whether the apartment is offered or equipped with furniture. It helps determine whether the tenant or buyer will have access to pre-existing furnishings or whether they need to provide their own.\n",
    "\n",
    "has_pool: It denotes whether the apartment has a swimming pool as part of its amenities or shared facilities. This feature adds a recreational element and can influence the desirability and value of the property.\n",
    "\n",
    "neighborhood: This variable represents the specific neighborhood or locality in which the apartment is situated within Barcelona. It provides geographical context and helps capture the characteristics and amenities associated with that area.\n",
    "\n",
    "num_crimes: It refers to the count or frequency of reported crimes that have occurred in the vicinity of the apartment's location or neighborhood. It serves as an indicator of safety and security within the area.\n",
    "\n",
    "has_ac: This variable indicates whether the apartment is equipped with an air conditioning system, offering cooling or heating capabilities to maintain a comfortable indoor temperature.\n",
    "\n",
    "accepts_pets: It denotes whether the apartment allows or accepts pets as tenants or residents. This variable is essential for individuals with pets who are seeking suitable accommodations.\n",
    "\n",
    "num_supermarkets: This variable represents the count or availability of supermarkets in close proximity to the apartment. It reflects the ease of access to grocery shopping facilities in the neighborhood.\n",
    "\n",
    "price: It represents the price of the apartment, typically measured in a specific currency (e.g., Euros). It is the dependent variable in the prediction task and serves as the target value to be estimated or predicted using the other variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cda373a9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'sklearn'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mpandas\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39mpd\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mpandas\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39mpd\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39msklearn\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mensemble\u001b[39;00m \u001b[39mimport\u001b[39;00m RandomForestRegressor\n\u001b[1;32m      4\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39msklearn\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mmodel_selection\u001b[39;00m \u001b[39mimport\u001b[39;00m train_test_split\n\u001b[1;32m      5\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mseaborn\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39msns\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sklearn'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfcf3c11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>orientation</th>\n",
       "      <th>year_built</th>\n",
       "      <th>door</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "      <th>num_supermarkets</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>3º - 1a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1562</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>west</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>7º - 2a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sants</td>\n",
       "      <td>4.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1º - 1a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6088</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-41.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>6º - 1a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Sants</td>\n",
       "      <td>5.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6670</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>5º - 1a</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "      <td>962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7995</th>\n",
       "      <td>5735</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>95.0</td>\n",
       "      <td>south</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>9º - 1a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7996</th>\n",
       "      <td>5192</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>9º - 4a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>9.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7997</th>\n",
       "      <td>5391</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>east</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>9º - 3a</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7998</th>\n",
       "      <td>861</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>west</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>8º - 4a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7999</th>\n",
       "      <td>7271</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1º - 4a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>8.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8000 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters orientation  year_built  \\\n",
       "0     9255        1.0        1.0            NaN         NaN      1956.0   \n",
       "1     1562        4.0        1.0          133.0        west      1960.0   \n",
       "2     1671        2.0        3.0          137.0         NaN      2000.0   \n",
       "3     6088        1.0        2.0          -41.0         NaN      2002.0   \n",
       "4     6670        2.0        1.0           70.0         NaN      1979.0   \n",
       "...    ...        ...        ...            ...         ...         ...   \n",
       "7995  5735        2.0        NaN           95.0       south      2021.0   \n",
       "7996  5192        4.0        3.0          166.0         NaN      1995.0   \n",
       "7997  5391        4.0        1.0           89.0        east      2015.0   \n",
       "7998   861        4.0        2.0          167.0        west      1977.0   \n",
       "7999  7271        2.0        1.0           95.0         NaN      2000.0   \n",
       "\n",
       "         door is_furnished has_pool neighborhood  num_crimes has_ac  \\\n",
       "0     3º - 1a        False    False   Sant Martí         2.0   True   \n",
       "1     7º - 2a        False    False        Sants         4.0  False   \n",
       "2     1º - 1a        False     True     Eixample         0.0  False   \n",
       "3     6º - 1a        False     True        Sants         5.0  False   \n",
       "4     5º - 1a         True    False       Gràcia         0.0  False   \n",
       "...       ...          ...      ...          ...         ...    ...   \n",
       "7995  9º - 1a        False    False   Sant Martí         0.0  False   \n",
       "7996  9º - 4a        False    False   Nou Barris         9.0  False   \n",
       "7997  9º - 3a         True    False   Sant Martí         0.0   True   \n",
       "7998  8º - 4a        False     True       Gràcia         0.0   True   \n",
       "7999  1º - 4a        False     True   Nou Barris         8.0   True   \n",
       "\n",
       "     accepts_pets  num_supermarkets  price  \n",
       "0            True               NaN   1096  \n",
       "1           False               2.0   1396  \n",
       "2           False               NaN   1263  \n",
       "3           False               NaN   1290  \n",
       "4            True               3.0    962  \n",
       "...           ...               ...    ...  \n",
       "7995        False               NaN   1066  \n",
       "7996        False               NaN   1255  \n",
       "7997        False               1.0   1220  \n",
       "7998        False               NaN   1547  \n",
       "7999        False               NaN   1133  \n",
       "\n",
       "[8000 rows x 15 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('train_apartment_prices_barcelona.csv')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14cd7188",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>orientation</th>\n",
       "      <th>year_built</th>\n",
       "      <th>door</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "      <th>num_supermarkets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>5º - 4a</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Les Cors</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>east</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>10º - 1a</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Ciutat Vella</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>5º - 2a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>8º - 4a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>7.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>8º - 4a</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Sant Andreu</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>6413</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>south</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>5º - 2a</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Sarrià-Sant Gervasi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>8286</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>5º - 1a</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>9.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>7854</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>4º - 2a</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>1096</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>north</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>9º - 1a</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>7.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6930</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>south</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>3º - 3a</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters orientation  year_built  \\\n",
       "0     6253        NaN        1.0          152.0         NaN      2012.0   \n",
       "1     4685        NaN        2.0           90.0        east      1957.0   \n",
       "2     1732        NaN        2.0           86.0         NaN      1991.0   \n",
       "3     4743        NaN        3.0          164.0         NaN      2002.0   \n",
       "4     4522        NaN        1.0           99.0         NaN      1984.0   \n",
       "...    ...        ...        ...            ...         ...         ...   \n",
       "1995  6413        3.0        3.0           95.0       south      1976.0   \n",
       "1996  8286        1.0        2.0          161.0         NaN      1984.0   \n",
       "1997  7854        4.0        3.0          111.0         NaN      1957.0   \n",
       "1998  1096        2.0        1.0          154.0       north      2018.0   \n",
       "1999  6930        4.0        2.0           55.0       south      1958.0   \n",
       "\n",
       "          door is_furnished has_pool         neighborhood  num_crimes has_ac  \\\n",
       "0      5º - 4a         True     True             Les Cors         0.0  False   \n",
       "1     10º - 1a         True    False         Ciutat Vella         2.0  False   \n",
       "2      5º - 2a        False    False             Eixample         0.0  False   \n",
       "3      8º - 4a        False     True           Nou Barris         7.0  False   \n",
       "4      8º - 4a         True     True          Sant Andreu         0.0   True   \n",
       "...        ...          ...      ...                  ...         ...    ...   \n",
       "1995   5º - 2a         True     True  Sarrià-Sant Gervasi         0.0   True   \n",
       "1996   5º - 1a         True    False           Nou Barris         9.0  False   \n",
       "1997   4º - 2a         True     True               Gràcia         0.0  False   \n",
       "1998   9º - 1a        False    False           Nou Barris         7.0  False   \n",
       "1999   3º - 3a        False     True             Eixample         0.0  False   \n",
       "\n",
       "     accepts_pets  num_supermarkets  \n",
       "0           False               NaN  \n",
       "1            True               3.0  \n",
       "2            True               NaN  \n",
       "3           False               NaN  \n",
       "4           False               3.0  \n",
       "...           ...               ...  \n",
       "1995         True               NaN  \n",
       "1996        False               NaN  \n",
       "1997         True               NaN  \n",
       "1998        False               NaN  \n",
       "1999        False               NaN  \n",
       "\n",
       "[2000 rows x 14 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data = pd.read_csv('test_apartment_prices_barcelona.csv')\n",
    "test_data\n",
    "\n",
    "#test data doesn't contain price variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3a50a98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                    int64\n",
       "num_rooms           float64\n",
       "num_baths           float64\n",
       "square_meters       float64\n",
       "orientation          object\n",
       "year_built          float64\n",
       "door                 object\n",
       "is_furnished         object\n",
       "has_pool             object\n",
       "neighborhood         object\n",
       "num_crimes          float64\n",
       "has_ac               object\n",
       "accepts_pets         object\n",
       "num_supermarkets    float64\n",
       "price                 int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4eb9b6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "num_rooms              0\n",
       "num_baths            160\n",
       "square_meters        155\n",
       "orientation         2341\n",
       "year_built           170\n",
       "door                 149\n",
       "is_furnished         165\n",
       "has_pool             156\n",
       "neighborhood         165\n",
       "num_crimes           160\n",
       "has_ac               169\n",
       "accepts_pets         155\n",
       "num_supermarkets    6589\n",
       "price                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# num_supermarkets are missing 6589 of 8000 so we should drop it\n",
    "# orientation missing 1/4 of the values so we should consider it to drop it\n",
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03cbceb6",
   "metadata": {},
   "source": [
    "# Just to practice code, I dropped all the columns that have NA values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b07edc42",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop Supermarket and Orientation columns and put NaN in extreme values of sqr_mts and rooms\n",
    "# drop door aswell as seems not usable at all\n",
    "cleaned_data = data.drop(columns=['num_supermarkets','orientation', 'door'])\n",
    "cleaned_data['square_meters'] = np.where(cleaned_data['square_meters']<0, np.NaN, cleaned_data['square_meters'])\n",
    "cleaned_data['num_rooms'] = np.where(cleaned_data['num_rooms']>6, np.NaN, cleaned_data['num_rooms'])\n",
    "#cleaned_data = cleaned_data.dropna(subset=['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'has_ac', 'accepts_pets',\n",
    "    #'neighborhood', 'num_crimes', 'price'])\n",
    "\n",
    "cleaned_test = test_data.drop(columns=['num_supermarkets','orientation', 'door'])\n",
    "cleaned_test['square_meters'] = np.where(cleaned_test['square_meters']<0, np.NaN, cleaned_test['square_meters'])\n",
    "cleaned_test['num_rooms'] = np.where(cleaned_test['num_rooms']>6, np.NaN, cleaned_test['num_rooms'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47a02a1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                 0\n",
       "num_rooms         46\n",
       "num_baths        160\n",
       "square_meters    236\n",
       "year_built       170\n",
       "is_furnished     165\n",
       "has_pool         156\n",
       "neighborhood     165\n",
       "num_crimes       160\n",
       "has_ac           169\n",
       "accepts_pets     155\n",
       "price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7c06402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                 0\n",
       "num_rooms        245\n",
       "num_baths         40\n",
       "square_meters     62\n",
       "year_built        30\n",
       "is_furnished      35\n",
       "has_pool          44\n",
       "neighborhood      35\n",
       "num_crimes        40\n",
       "has_ac            31\n",
       "accepts_pets      45\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_test.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62cd2f1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>year_built</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8000.000000</td>\n",
       "      <td>7954.000000</td>\n",
       "      <td>7840.000000</td>\n",
       "      <td>7764.000000</td>\n",
       "      <td>7830.000000</td>\n",
       "      <td>7840.000000</td>\n",
       "      <td>8000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5012.506875</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>1.988265</td>\n",
       "      <td>109.727975</td>\n",
       "      <td>1985.321073</td>\n",
       "      <td>2.803444</td>\n",
       "      <td>1099.616250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2887.649416</td>\n",
       "      <td>1.121536</td>\n",
       "      <td>0.815943</td>\n",
       "      <td>34.983361</td>\n",
       "      <td>20.591437</td>\n",
       "      <td>3.447714</td>\n",
       "      <td>271.686617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>195.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2512.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>1968.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>905.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5014.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>1985.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1104.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7505.250000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>2003.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1295.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>2021.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2095.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id    num_rooms    num_baths  square_meters   year_built  \\\n",
       "count   8000.000000  7954.000000  7840.000000    7764.000000  7830.000000   \n",
       "mean    5012.506875     2.489565     1.988265     109.727975  1985.321073   \n",
       "std     2887.649416     1.121536     0.815943      34.983361    20.591437   \n",
       "min        2.000000     1.000000     1.000000      50.000000  1950.000000   \n",
       "25%     2512.750000     1.000000     1.000000      79.000000  1968.000000   \n",
       "50%     5014.500000     2.000000     2.000000     110.000000  1985.000000   \n",
       "75%     7505.250000     3.000000     3.000000     140.000000  2003.000000   \n",
       "max    10000.000000     4.000000     3.000000     170.000000  2021.000000   \n",
       "\n",
       "        num_crimes        price  \n",
       "count  7840.000000  8000.000000  \n",
       "mean      2.803444  1099.616250  \n",
       "std       3.447714   271.686617  \n",
       "min       0.000000   195.000000  \n",
       "25%       0.000000   905.750000  \n",
       "50%       1.000000  1104.000000  \n",
       "75%       6.000000  1295.000000  \n",
       "max      10.000000  2095.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d41b231",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ceba98e3",
   "metadata": {},
   "source": [
    "# clean Nan values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5149c88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Train Data': 0, 'Test Data': 0}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# KNN for number of rooms\n",
    "\n",
    "from sklearn.impute import KNNImputer\n",
    "\n",
    "# Initialize the KNN imputer\n",
    "knn_imputer = KNNImputer(n_neighbors=5)\n",
    "\n",
    "# Apply KNN imputation on the 'num_rooms' column for both train and test datasets\n",
    "cleaned_data['num_rooms'] = knn_imputer.fit_transform(cleaned_data[['num_rooms']])\n",
    "cleaned_test['num_rooms'] = knn_imputer.transform(cleaned_test[['num_rooms']])\n",
    "\n",
    "# Check the number of missing values in 'num_rooms' column after imputation\n",
    "missing_num_rooms_after = {\n",
    "    'Train Data': cleaned_data['num_rooms'].isnull().sum(),\n",
    "    'Test Data': cleaned_test['num_rooms'].isnull().sum()\n",
    "}\n",
    "\n",
    "missing_num_rooms_after\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6f06aa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num_rooms        0\n",
       "num_baths        0\n",
       "square_meters    0\n",
       "year_built       0\n",
       "is_furnished     0\n",
       "has_pool         0\n",
       "neighborhood     0\n",
       "num_crimes       0\n",
       "has_ac           0\n",
       "accepts_pets     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply KNN imputation on the 'num_baths' column\n",
    "cleaned_data['num_baths'] = knn_imputer.fit_transform(cleaned_data[['num_baths']])\n",
    "cleaned_test['num_baths'] = knn_imputer.transform(cleaned_test[['num_baths']])\n",
    "\n",
    "# Mean imputation for 'square_meters'\n",
    "cleaned_data['square_meters'].fillna(cleaned_data['square_meters'].mean(), inplace=True)\n",
    "cleaned_test['square_meters'].fillna(cleaned_test['square_meters'].mean(), inplace=True)  # Use mean from train data\n",
    "\n",
    "# Median imputation for 'year_built'\n",
    "cleaned_data['year_built'].fillna(cleaned_data['year_built'].median(), inplace=True)\n",
    "cleaned_test['year_built'].fillna(cleaned_test['year_built'].median(), inplace=True)  # Use median from train data\n",
    "\n",
    "# Mode imputation for binary columns\n",
    "binary_cols = ['is_furnished', 'has_pool', 'has_ac', 'accepts_pets']\n",
    "for col in binary_cols:\n",
    "    mode_val =  cleaned_data[col].mode()[0]\n",
    "    cleaned_data[col].fillna(mode_val, inplace=True)\n",
    "    cleaned_test[col].fillna(mode_val, inplace=True)\n",
    "\n",
    "# Mode imputation for 'neighborhood'\n",
    "mode_neighborhood = cleaned_data['neighborhood'].mode()[0]\n",
    "cleaned_data['neighborhood'].fillna(mode_neighborhood, inplace=True)\n",
    "cleaned_test['neighborhood'].fillna(mode_neighborhood, inplace=True)\n",
    "\n",
    "# Median imputation for 'num_crimes'\n",
    "cleaned_data['num_crimes'].fillna(cleaned_data['num_crimes'].median(), inplace=True)\n",
    "cleaned_test['num_crimes'].fillna(cleaned_test['num_crimes'].median(), inplace=True)  # Use median from train data\n",
    "\n",
    "# Check the number of missing values in the specified columns after imputation\n",
    "missing_values_after = cleaned_data[['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'neighborhood', 'num_crimes', 'has_ac', 'accepts_pets']].isnull().sum()\n",
    "missing_values_after\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55fbf65f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "num_rooms        0\n",
       "num_baths        0\n",
       "square_meters    0\n",
       "year_built       0\n",
       "is_furnished     0\n",
       "has_pool         0\n",
       "neighborhood     0\n",
       "num_crimes       0\n",
       "has_ac           0\n",
       "accepts_pets     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_test.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f133fbb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "num_rooms        0\n",
       "num_baths        0\n",
       "square_meters    0\n",
       "year_built       0\n",
       "is_furnished     0\n",
       "has_pool         0\n",
       "neighborhood     0\n",
       "num_crimes       0\n",
       "has_ac           0\n",
       "accepts_pets     0\n",
       "price            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0c91dc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>year_built</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>109.727975</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1562</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sants</td>\n",
       "      <td>4.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6088</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>109.727975</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Sants</td>\n",
       "      <td>5.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6670</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7995</th>\n",
       "      <td>5735</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.988265</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7996</th>\n",
       "      <td>5192</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>9.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7997</th>\n",
       "      <td>5391</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Sant Martí</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>1220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7998</th>\n",
       "      <td>861</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>1547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7999</th>\n",
       "      <td>7271</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>8.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>1133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8000 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters  year_built  is_furnished  \\\n",
       "0     9255        1.0   1.000000     109.727975      1956.0         False   \n",
       "1     1562        4.0   1.000000     133.000000      1960.0         False   \n",
       "2     1671        2.0   3.000000     137.000000      2000.0         False   \n",
       "3     6088        1.0   2.000000     109.727975      2002.0         False   \n",
       "4     6670        2.0   1.000000      70.000000      1979.0          True   \n",
       "...    ...        ...        ...            ...         ...           ...   \n",
       "7995  5735        2.0   1.988265      95.000000      2021.0         False   \n",
       "7996  5192        4.0   3.000000     166.000000      1995.0         False   \n",
       "7997  5391        4.0   1.000000      89.000000      2015.0          True   \n",
       "7998   861        4.0   2.000000     167.000000      1977.0         False   \n",
       "7999  7271        2.0   1.000000      95.000000      2000.0         False   \n",
       "\n",
       "      has_pool neighborhood  num_crimes  has_ac  accepts_pets  price  \n",
       "0        False   Sant Martí         2.0    True          True   1096  \n",
       "1        False        Sants         4.0   False         False   1396  \n",
       "2         True     Eixample         0.0   False         False   1263  \n",
       "3         True        Sants         5.0   False         False   1290  \n",
       "4        False       Gràcia         0.0   False          True    962  \n",
       "...        ...          ...         ...     ...           ...    ...  \n",
       "7995     False   Sant Martí         0.0   False         False   1066  \n",
       "7996     False   Nou Barris         9.0   False         False   1255  \n",
       "7997     False   Sant Martí         0.0    True         False   1220  \n",
       "7998      True       Gràcia         0.0    True         False   1547  \n",
       "7999      True   Nou Barris         8.0    True         False   1133  \n",
       "\n",
       "[8000 rows x 12 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b54870ad",
   "metadata": {},
   "source": [
    "# Transform \"cleaned_data\" columns to numerical values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c9e19ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform furnished column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_data['is_furnished']= label_encoder.fit_transform(cleaned_data['is_furnished']) \n",
    "\n",
    "cleaned_data['is_furnished'].unique() \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b81bc953",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c32b44ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform has_pool column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_data['has_pool']= label_encoder.fit_transform(cleaned_data['has_pool']) \n",
    "\n",
    "cleaned_data['has_pool'].unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ef8c112",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0cab2e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 8, 1, 2, 4, 9, 3, 6, 0, 5])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform neighborhood column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_data['neighborhood']= label_encoder.fit_transform(cleaned_data['neighborhood']) \n",
    "\n",
    "cleaned_data['neighborhood'].unique() \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b859f32d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Ciutat Vella': 0, 'Eixample': 1, 'Gràcia': 2, 'Horta': 3, 'Les Cors': 4, 'Nou Barris': 5, 'Sant Andreu': 6, 'Sant Martí': 7, 'Sants': 8, 'Sarrià-Sant Gervasi': 9}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "879cb988",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform has_ac column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_data['has_ac']= label_encoder.fit_transform(cleaned_data['has_ac']) \n",
    "\n",
    "cleaned_data['has_ac'].unique() \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96fc0e06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f361189f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform accepts_pets column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_data['accepts_pets']= label_encoder.fit_transform(cleaned_data['accepts_pets']) \n",
    "\n",
    "cleaned_data['accepts_pets'].unique() \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "140ae4ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15afa920",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>year_built</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>109.727975</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1562</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6088</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>109.727975</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6670</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7995</th>\n",
       "      <td>5735</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.988265</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7996</th>\n",
       "      <td>5192</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7997</th>\n",
       "      <td>5391</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7998</th>\n",
       "      <td>861</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7999</th>\n",
       "      <td>7271</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8000 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters  year_built  is_furnished  \\\n",
       "0     9255        1.0   1.000000     109.727975      1956.0             0   \n",
       "1     1562        4.0   1.000000     133.000000      1960.0             0   \n",
       "2     1671        2.0   3.000000     137.000000      2000.0             0   \n",
       "3     6088        1.0   2.000000     109.727975      2002.0             0   \n",
       "4     6670        2.0   1.000000      70.000000      1979.0             1   \n",
       "...    ...        ...        ...            ...         ...           ...   \n",
       "7995  5735        2.0   1.988265      95.000000      2021.0             0   \n",
       "7996  5192        4.0   3.000000     166.000000      1995.0             0   \n",
       "7997  5391        4.0   1.000000      89.000000      2015.0             1   \n",
       "7998   861        4.0   2.000000     167.000000      1977.0             0   \n",
       "7999  7271        2.0   1.000000      95.000000      2000.0             0   \n",
       "\n",
       "      has_pool  neighborhood  num_crimes  has_ac  accepts_pets  price  \n",
       "0            0             7         2.0       1             1   1096  \n",
       "1            0             8         4.0       0             0   1396  \n",
       "2            1             1         0.0       0             0   1263  \n",
       "3            1             8         5.0       0             0   1290  \n",
       "4            0             2         0.0       0             1    962  \n",
       "...        ...           ...         ...     ...           ...    ...  \n",
       "7995         0             7         0.0       0             0   1066  \n",
       "7996         0             5         9.0       0             0   1255  \n",
       "7997         0             7         0.0       1             0   1220  \n",
       "7998         1             2         0.0       1             0   1547  \n",
       "7999         1             5         8.0       1             0   1133  \n",
       "\n",
       "[8000 rows x 12 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f399ec94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "num_rooms        0\n",
       "num_baths        0\n",
       "square_meters    0\n",
       "year_built       0\n",
       "is_furnished     0\n",
       "has_pool         0\n",
       "neighborhood     0\n",
       "num_crimes       0\n",
       "has_ac           0\n",
       "accepts_pets     0\n",
       "price            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f40249",
   "metadata": {},
   "source": [
    "# Transform \"cleaned_test\" columns to numerical values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f980d53b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>year_built</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>1.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Les Cors</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Ciutat Vella</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>2.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>3.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>7.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Sant Andreu</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>6413</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Sarrià-Sant Gervasi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>8286</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>9.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>7854</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Gràcia</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>1096</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Nou Barris</td>\n",
       "      <td>7.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6930</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Eixample</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters  year_built  is_furnished  \\\n",
       "0     6253   2.489565        1.0          152.0      2012.0          True   \n",
       "1     4685   2.489565        2.0           90.0      1957.0          True   \n",
       "2     1732   2.489565        2.0           86.0      1991.0         False   \n",
       "3     4743   2.489565        3.0          164.0      2002.0         False   \n",
       "4     4522   2.489565        1.0           99.0      1984.0          True   \n",
       "...    ...        ...        ...            ...         ...           ...   \n",
       "1995  6413   3.000000        3.0           95.0      1976.0          True   \n",
       "1996  8286   1.000000        2.0          161.0      1984.0          True   \n",
       "1997  7854   4.000000        3.0          111.0      1957.0          True   \n",
       "1998  1096   2.000000        1.0          154.0      2018.0         False   \n",
       "1999  6930   4.000000        2.0           55.0      1958.0         False   \n",
       "\n",
       "      has_pool         neighborhood  num_crimes  has_ac  accepts_pets  \n",
       "0         True             Les Cors         0.0   False         False  \n",
       "1        False         Ciutat Vella         2.0   False          True  \n",
       "2        False             Eixample         0.0   False          True  \n",
       "3         True           Nou Barris         7.0   False         False  \n",
       "4         True          Sant Andreu         0.0    True         False  \n",
       "...        ...                  ...         ...     ...           ...  \n",
       "1995      True  Sarrià-Sant Gervasi         0.0    True          True  \n",
       "1996     False           Nou Barris         9.0   False         False  \n",
       "1997      True               Gràcia         0.0   False          True  \n",
       "1998     False           Nou Barris         7.0   False         False  \n",
       "1999      True             Eixample         0.0   False         False  \n",
       "\n",
       "[2000 rows x 11 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "312125ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of columns to be imputed\n",
    "#columns_to_impute = [\"num_rooms\", \"num_baths\", \"square_meters\", \"year_built\", \"num_crimes\"]\n",
    "\n",
    "# For each column, replace missing values with its mode\n",
    "#for column in columns_to_impute:\n",
    "   # mode_value = cleaned_test[column].mode()[0]\n",
    "    #cleaned_test[column].fillna(mode_value, inplace=True)\n",
    "\n",
    "# Display the first few rows of the updated DataFrame to verify the changes\n",
    "#cleaned_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18a8d04c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "num_rooms        0\n",
       "num_baths        0\n",
       "square_meters    0\n",
       "year_built       0\n",
       "is_furnished     0\n",
       "has_pool         0\n",
       "neighborhood     0\n",
       "num_crimes       0\n",
       "has_ac           0\n",
       "accepts_pets     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_test.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58d4e9f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform furnished column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_test['is_furnished']= label_encoder.fit_transform(cleaned_test['is_furnished']) \n",
    "\n",
    "cleaned_test['is_furnished'].unique() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccdfe5bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9347936a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform has_pool column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_test['has_pool']= label_encoder.fit_transform(cleaned_test['has_pool']) \n",
    "\n",
    "cleaned_test['has_pool'].unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad237c36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14186db9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 0, 1, 5, 6, 3, 8, 2, 7, 9])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform neighborhood column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_test['neighborhood']= label_encoder.fit_transform(cleaned_test['neighborhood']) \n",
    "\n",
    "cleaned_test['neighborhood'].unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85862e8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Ciutat Vella': 0, 'Eixample': 1, 'Gràcia': 2, 'Horta': 3, 'Les Cors': 4, 'Nou Barris': 5, 'Sant Andreu': 6, 'Sant Martí': 7, 'Sants': 8, 'Sarrià-Sant Gervasi': 9}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c330765",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform has_ac column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_test['has_ac']= label_encoder.fit_transform(cleaned_test['has_ac']) \n",
    "\n",
    "cleaned_test['has_ac'].unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7dbb02ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3155bef5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform accepts_pets column into numerical values\n",
    "\n",
    "\n",
    "# Import label encoder \n",
    "from sklearn import preprocessing \n",
    "\n",
    "# label_encoder object knows \n",
    "# how to understand word labels. \n",
    "label_encoder = preprocessing.LabelEncoder() \n",
    "\n",
    "# Encode labels in column 'is_furnished'. \n",
    "cleaned_test['accepts_pets']= label_encoder.fit_transform(cleaned_test['accepts_pets']) \n",
    "\n",
    "cleaned_test['accepts_pets'].unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94effcf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{False: 0, True: 1}\n"
     ]
    }
   ],
   "source": [
    "mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))\n",
    "print(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dde47ccd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b58aaa45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_rooms</th>\n",
       "      <th>num_baths</th>\n",
       "      <th>square_meters</th>\n",
       "      <th>year_built</th>\n",
       "      <th>is_furnished</th>\n",
       "      <th>has_pool</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>num_crimes</th>\n",
       "      <th>has_ac</th>\n",
       "      <th>accepts_pets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>1.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>2.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>3.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>2.489565</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>6413</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>8286</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>7854</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>1096</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6930</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  num_rooms  num_baths  square_meters  year_built  is_furnished  \\\n",
       "0     6253   2.489565        1.0          152.0      2012.0             1   \n",
       "1     4685   2.489565        2.0           90.0      1957.0             1   \n",
       "2     1732   2.489565        2.0           86.0      1991.0             0   \n",
       "3     4743   2.489565        3.0          164.0      2002.0             0   \n",
       "4     4522   2.489565        1.0           99.0      1984.0             1   \n",
       "...    ...        ...        ...            ...         ...           ...   \n",
       "1995  6413   3.000000        3.0           95.0      1976.0             1   \n",
       "1996  8286   1.000000        2.0          161.0      1984.0             1   \n",
       "1997  7854   4.000000        3.0          111.0      1957.0             1   \n",
       "1998  1096   2.000000        1.0          154.0      2018.0             0   \n",
       "1999  6930   4.000000        2.0           55.0      1958.0             0   \n",
       "\n",
       "      has_pool  neighborhood  num_crimes  has_ac  accepts_pets  \n",
       "0            1             4         0.0       0             0  \n",
       "1            0             0         2.0       0             1  \n",
       "2            0             1         0.0       0             1  \n",
       "3            1             5         7.0       0             0  \n",
       "4            1             6         0.0       1             0  \n",
       "...        ...           ...         ...     ...           ...  \n",
       "1995         1             9         0.0       1             1  \n",
       "1996         0             5         9.0       0             0  \n",
       "1997         1             2         0.0       0             1  \n",
       "1998         0             5         7.0       0             0  \n",
       "1999         1             1         0.0       0             0  \n",
       "\n",
       "[2000 rows x 11 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7823766d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b15d7840",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3c91637b",
   "metadata": {},
   "source": [
    "# EDA CORRELATIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "439e7e04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Importing our libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Let's calculate the correlations\n",
    "cleaned_data_corr = cleaned_data.corr()\n",
    "\n",
    "# Plot correlations\n",
    "# Remove upper triangle\n",
    "fig, ax = plt.subplots(figsize=(14,8))\n",
    "mask = np.zeros_like(cleaned_data_corr, dtype=np.bool)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "ax = sns.heatmap(cleaned_data_corr, mask = mask, annot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b85a133",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Importing our libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Let's calculate the correlations\n",
    "cleaned_test_corr = cleaned_test.corr()\n",
    "\n",
    "# Plot correlations\n",
    "# Remove upper triangle\n",
    "fig, ax = plt.subplots(figsize=(14,8))\n",
    "mask = np.zeros_like(cleaned_test_corr, dtype=np.bool)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "ax = sns.heatmap(cleaned_test_corr, mask = mask, annot = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "351d4081",
   "metadata": {},
   "source": [
    "# Testing the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da1d8682",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#X_train = cleaned_data[['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'has_ac', 'accepts_pets',\n",
    "   # 'neighborhood', 'num_crimes']]\n",
    "#X_test = cleaned_test[['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'has_ac', 'accepts_pets',\n",
    "    #'neighborhood', 'num_crimes']]\n",
    "\n",
    "#y_train = cleaned_data['price']\n",
    "#y_test = cleaned_test\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96a88e9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training MSE: 29989.118818911626\n",
      "[1387.97797284 1002.10339834 1021.61956366 1319.14123045 1099.18560338\n",
      "  852.30689356  954.95086516 1220.77938932 1047.94044922 1224.69013176]\n"
     ]
    }
   ],
   "source": [
    "X_train = cleaned_data.drop(columns=['price'])\n",
    "y_train = cleaned_data['price']\n",
    "X_test = cleaned_test  # Assuming cleaned_test doesn't contain the 'price' column\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lm = LinearRegression()\n",
    "lm.fit(X_train, y_train)\n",
    "\n",
    "train_predictions = lm.predict(X_train)\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_train = mean_squared_error(y_train, train_predictions)\n",
    "print(\"Training MSE:\", mse_train)\n",
    "\n",
    "test_predictions = lm.predict(X_test)\n",
    "print(test_predictions[:10])  # Displaying the first 10 predictions for test data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "228993ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     id        price\n",
      "0  6253  1387.977973\n",
      "1  4685  1002.103398\n",
      "2  1732  1021.619564\n",
      "3  4743  1319.141230\n",
      "4  4522  1099.185603\n",
      "5  6341   852.306894\n",
      "6   577   954.950865\n",
      "7  5203  1220.779389\n",
      "8  6364  1047.940449\n",
      "9   440  1224.690132\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>1387.977973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>1002.103398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>1021.619564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>1319.141230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>1099.185603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>6413</td>\n",
       "      <td>1098.790239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>8286</td>\n",
       "      <td>1222.290847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>7854</td>\n",
       "      <td>1199.544016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>1096</td>\n",
       "      <td>1230.433757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6930</td>\n",
       "      <td>879.370467</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id        price\n",
       "0     6253  1387.977973\n",
       "1     4685  1002.103398\n",
       "2     1732  1021.619564\n",
       "3     4743  1319.141230\n",
       "4     4522  1099.185603\n",
       "...    ...          ...\n",
       "1995  6413  1098.790239\n",
       "1996  8286  1222.290847\n",
       "1997  7854  1199.544016\n",
       "1998  1096  1230.433757\n",
       "1999  6930   879.370467\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assuming the LinearRegression model (lm) is already trained as shown earlier\n",
    "\n",
    "# 1. Predict prices for the test dataset\n",
    "predicted_prices = lm.predict(X_test)\n",
    "\n",
    "# 2. Combine the \"ID\" column with predicted prices\n",
    "results = pd.DataFrame({\n",
    "    'id': cleaned_test['id'],\n",
    "    'price': predicted_prices\n",
    "})\n",
    "\n",
    "# Display the first few rows of the results\n",
    "print(results.head(10))\n",
    "\n",
    "# 3. Optionally, save the results to a CSV file\n",
    "results.to_csv('predicted_prices.csv', index=False)\n",
    "results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04ebb544",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 138.00305749472057\n",
      "Mean Squared Error (MSE): 29989.118818911626\n",
      "Root Mean Squared Error (RMSE): 173.17366664395493\n",
      "R-squared: 0.5936675539665037\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "# Your actual prices from the cleaned_data dataset\n",
    "actual_prices = y_train\n",
    "\n",
    "# Compute the metrics\n",
    "mae = metrics.mean_absolute_error(actual_prices, train_predictions)\n",
    "mse = metrics.mean_squared_error(actual_prices, train_predictions)\n",
    "rmse = np.sqrt(mse)\n",
    "r2 = metrics.r2_score(actual_prices, train_predictions)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n",
    "print(f\"R-squared: {r2}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2afb09e",
   "metadata": {},
   "source": [
    "# Test the code Ridge\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76e773b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training MSE with RidgeCV: 29989.12004267509\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>1387.983505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>1002.143797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>1021.659923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>1319.128958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>1099.153467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6341</td>\n",
       "      <td>852.276138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>577</td>\n",
       "      <td>954.908774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5203</td>\n",
       "      <td>1220.791602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6364</td>\n",
       "      <td>1048.012904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>440</td>\n",
       "      <td>1224.707997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id        price\n",
       "0  6253  1387.983505\n",
       "1  4685  1002.143797\n",
       "2  1732  1021.659923\n",
       "3  4743  1319.128958\n",
       "4  4522  1099.153467\n",
       "5  6341   852.276138\n",
       "6   577   954.908774\n",
       "7  5203  1220.791602\n",
       "8  6364  1048.012904\n",
       "9   440  1224.707997"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import RidgeCV\n",
    "# Assuming cleaned_data and cleaned_test are already defined as before\n",
    "X_train = cleaned_data.drop(columns=['price'])\n",
    "y_train = cleaned_data['price']\n",
    "X_test = cleaned_test  # Assuming cleaned_test doesn't contain the 'price' column\n",
    "\n",
    "# Create and fit the LassoCV model\n",
    "alphas = np.logspace(-4, 1, 100)  # List of alpha values to test\n",
    "ridge_cv_model = RidgeCV(alphas=alphas, cv=10)  # cv parameter sets the number of cross-validation folds\n",
    "ridge_cv_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the training data and calculate MSE\n",
    "train_predictions_ridge_cv = ridge_cv_model.predict(X_train)\n",
    "mse_train_ridge_cv = mean_squared_error(y_train, train_predictions_ridge_cv)\n",
    "print(\"Training MSE with RidgeCV:\", mse_train_ridge_cv)\n",
    "\n",
    "# Predict on the test data using LassoCV\n",
    "test_predictions_ridge_cv = ridge_cv_model.predict(X_test)\n",
    "\n",
    "# Display the first 10 predictions for test data using LassoCV\n",
    "test_display_ridge_cv = test_predictions_ridge_cv[:10]\n",
    "\n",
    "# Create a DataFrame with the test set \"id\"s and the predicted \"price\"\n",
    "results_ridge_cv = pd.DataFrame({\n",
    "    'id': cleaned_test['id'],\n",
    "    'price': test_predictions_ridge_cv\n",
    "})\n",
    "\n",
    "# Display the first few rows of the results and save to a CSV file\n",
    "results_display_ridge_cv = results_ridge_cv.head(10)\n",
    "results.to_csv('predicted_prices_ridge_cv.csv', index=False)\n",
    "results_display_ridge_cv\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bfcd580",
   "metadata": {},
   "source": [
    "# Test the code LASSO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e93f7ecc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30004.302451492542, 173.21750041924903, 138.0568778427368)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "X_train = cleaned_data[['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'has_ac', 'accepts_pets',\n",
    "    'neighborhood', 'num_crimes']]\n",
    "X_test = cleaned_test[['num_rooms', 'num_baths', 'square_meters', 'year_built', 'is_furnished', 'has_pool', 'has_ac', 'accepts_pets',\n",
    "    'neighborhood', 'num_crimes']]\n",
    "\n",
    "y_train = cleaned_data['price']\n",
    "y_test = cleaned_test\n",
    "\n",
    "\n",
    "\n",
    "# Instantiate and train the Lasso regression model\n",
    "lasso_reg = Lasso()\n",
    "lasso_reg.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the training data to evaluate the model\n",
    "y_train_pred_lasso = lasso_reg.predict(X_train)\n",
    "\n",
    "# Calculate evaluation metrics for Lasso\n",
    "mse_lasso = mean_squared_error(y_train, y_train_pred_lasso)\n",
    "rmse_lasso = mean_squared_error(y_train, y_train_pred_lasso, squared=False)\n",
    "mae_lasso = mean_absolute_error(y_train, y_train_pred_lasso)\n",
    "\n",
    "mse_lasso, rmse_lasso, mae_lasso\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8160b48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training MSE with Lasso: 30004.049353739098\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1386.58493352, 1007.22472902, 1027.77878187, 1316.27504722,\n",
       "       1094.09537895,  849.63764985,  950.63156205, 1220.48456186,\n",
       "       1056.64676243, 1226.13876344])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = cleaned_data.drop(columns=['price'])\n",
    "y_train = cleaned_data['price']\n",
    "X_test = cleaned_test  # Assuming cleaned_test doesn't contain the 'price' column\n",
    "\n",
    "from sklearn.linear_model import Lasso\n",
    "lasso_model = Lasso()\n",
    "lasso_model.fit(X_train, y_train)\n",
    "\n",
    "train_predictions_lasso = lasso_model.predict(X_train)\n",
    "mse_train_lasso = mean_squared_error(y_train, train_predictions_lasso)\n",
    "print(\"Training MSE with Lasso:\", mse_train_lasso)\n",
    "\n",
    "# Predict on the test data\n",
    "test_predictions_lasso = lasso_model.predict(X_test)\n",
    "test_predictions_lasso[:10]  # Displaying the first 10 predictions for test data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f46d48e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     id        price\n",
      "0  6253  1387.977973\n",
      "1  4685  1002.103398\n",
      "2  1732  1021.619564\n",
      "3  4743  1319.141230\n",
      "4  4522  1099.185603\n",
      "5  6341   852.306894\n",
      "6   577   954.950865\n",
      "7  5203  1220.779389\n",
      "8  6364  1047.940449\n",
      "9   440  1224.690132\n"
     ]
    }
   ],
   "source": [
    "# Assuming the Lassomodel is already trained as shown earlier\n",
    "\n",
    "# 1. Predict prices for the test dataset\n",
    "predicted_prices_lasso = lasso_model.predict(X_test)\n",
    "\n",
    "# 2. Combine the \"ID\" column with predicted prices\n",
    "results = pd.DataFrame({\n",
    "    'id': cleaned_test['id'],\n",
    "    'price': predicted_prices\n",
    "})\n",
    "\n",
    "# Display the first few rows of the results\n",
    "print(results.head(10))\n",
    "\n",
    "# 3. Optionally, save the results to a CSV file\n",
    "results.to_csv('predicted_prices_lasso.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08bae46f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training MSE with LassoCV: 29990.213844031274\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6253</td>\n",
       "      <td>1387.275241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4685</td>\n",
       "      <td>1002.957348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1732</td>\n",
       "      <td>1023.439408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4743</td>\n",
       "      <td>1318.801934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4522</td>\n",
       "      <td>1097.568317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6341</td>\n",
       "      <td>851.999097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>577</td>\n",
       "      <td>953.512633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5203</td>\n",
       "      <td>1221.043914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6364</td>\n",
       "      <td>1050.389016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>440</td>\n",
       "      <td>1224.647139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id        price\n",
       "0  6253  1387.275241\n",
       "1  4685  1002.957348\n",
       "2  1732  1023.439408\n",
       "3  4743  1318.801934\n",
       "4  4522  1097.568317\n",
       "5  6341   851.999097\n",
       "6   577   953.512633\n",
       "7  5203  1221.043914\n",
       "8  6364  1050.389016\n",
       "9   440  1224.647139"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LassoCV\n",
    "# Assuming cleaned_data and cleaned_test are already defined as before\n",
    "X_train = cleaned_data.drop(columns=['price'])\n",
    "y_train = cleaned_data['price']\n",
    "X_test = cleaned_test  # Assuming cleaned_test doesn't contain the 'price' column\n",
    "\n",
    "# Create and fit the LassoCV model\n",
    "alphas = np.logspace(-4, 1, 100)  # List of alpha values to test\n",
    "lasso_cv_model = LassoCV(alphas=alphas, cv=10)  # cv parameter sets the number of cross-validation folds\n",
    "lasso_cv_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the training data and calculate MSE\n",
    "train_predictions_lasso_cv = lasso_cv_model.predict(X_train)\n",
    "mse_train_lasso_cv = mean_squared_error(y_train, train_predictions_lasso_cv)\n",
    "print(\"Training MSE with LassoCV:\", mse_train_lasso_cv)\n",
    "\n",
    "# Predict on the test data using LassoCV\n",
    "test_predictions_lasso_cv = lasso_cv_model.predict(X_test)\n",
    "\n",
    "# Display the first 10 predictions for test data using LassoCV\n",
    "test_display_lasso_cv = test_predictions_lasso_cv[:10]\n",
    "\n",
    "# Create a DataFrame with the test set \"id\"s and the predicted \"price\"\n",
    "results_lasso_cv = pd.DataFrame({\n",
    "    'id': cleaned_test['id'],\n",
    "    'price': test_predictions_lasso_cv\n",
    "})\n",
    "\n",
    "# Display the first few rows of the results and save to a CSV file\n",
    "results_display_lasso_cv = results_lasso_cv.head(10)\n",
    "\n",
    "results.to_csv('predicted_prices_lasso_cv.csv', index=False)\n",
    "\n",
    "results_display_lasso_cv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cca0405",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
